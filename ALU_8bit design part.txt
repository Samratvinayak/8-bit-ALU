module ALU_8bit (
    input [7:0] A,            // 8-bit input A
    input [7:0] B,            // 8-bit input B
    input [2:0] opcode,       // 3-bit opcode to select operation
    output reg [7:0] Result,  // 8-bit output result
    output reg carry_out      // Carry-out for addition and subtraction
);

    always @(*) begin
        case (opcode)
            3'b000: {carry_out, Result} = A + B;         // Addition with carry-out
            3'b001: {carry_out, Result} = A - B;         // Subtraction with carry-out
            3'b010: Result = A & B;                      // AND operation
            3'b011: Result = A | B;                      // OR operation
            3'b100: Result = A ^ B;                      // XOR operation
            3'b101: Result = ~A;                         // NOT operation on A
            3'b110: Result = A << 1;                     // Logical left shift of A by 1
            3'b111: Result = A >> 1;                     // Logical right shift of A by 1
            default: Result = 8'b00000000;               // Default case (all zeros)
        endcase
    end

endmodule
